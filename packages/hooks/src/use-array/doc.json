{
  "name": "useArray",
  "description": "A powerful React hook that provides helper methods for working with array state, including push, pop, filter, sort, and other common array operations with optimized performance using useCallback.",
  "category": "state",
  "version": "1.0.0",
  "parameters": [
    {
      "name": "initialArray",
      "type": "T[]",
      "optional": true,
      "default": "[]",
      "description": "The initial array value to start with"
    }
  ],
  "returnType": {
    "type": "UseArrayReturn<T>",
    "properties": [
      {
        "name": "array",
        "type": "T[]",
        "description": "The current array state",
        "category": "state"
      },
      {
        "name": "set",
        "type": "(newArray: T[]) => void",
        "description": "Replace the entire array with a new array",
        "category": "mutation",
        "parameters": [
          {
            "name": "newArray",
            "type": "T[]",
            "description": "The new array to set"
          }
        ]
      },
      {
        "name": "push",
        "type": "(...items: T[]) => void",
        "description": "Add one or more items to the end of the array",
        "category": "mutation",
        "parameters": [
          {
            "name": "items",
            "type": "...T[]",
            "description": "Items to add to the end of the array"
          }
        ]
      },
      {
        "name": "pop",
        "type": "() => T | undefined",
        "description": "Remove and return the last item from the array",
        "category": "mutation",
        "returnType": "The removed item or undefined if array is empty"
      },
      {
        "name": "shift",
        "type": "() => T | undefined",
        "description": "Remove and return the first item from the array",
        "category": "mutation",
        "returnType": "The removed item or undefined if array is empty"
      },
      {
        "name": "unshift",
        "type": "(...items: T[]) => void",
        "description": "Add one or more items to the beginning of the array",
        "category": "mutation",
        "parameters": [
          {
            "name": "items",
            "type": "...T[]",
            "description": "Items to add to the beginning of the array"
          }
        ]
      },
      {
        "name": "insert",
        "type": "(index: number, ...items: T[]) => void",
        "description": "Insert one or more items at a specific index",
        "category": "mutation",
        "parameters": [
          {
            "name": "index",
            "type": "number",
            "description": "The index where to insert the items"
          },
          {
            "name": "items",
            "type": "...T[]",
            "description": "Items to insert"
          }
        ]
      },
      {
        "name": "remove",
        "type": "(index: number) => void",
        "description": "Remove an item at a specific index",
        "category": "mutation",
        "parameters": [
          {
            "name": "index",
            "type": "number",
            "description": "The index of the item to remove"
          }
        ]
      },
      {
        "name": "removeById",
        "type": "(id: any, key?: keyof T) => void",
        "description": "Remove an item by its ID or specified key",
        "category": "mutation",
        "parameters": [
          {
            "name": "id",
            "type": "any",
            "description": "The ID value to match"
          },
          {
            "name": "key",
            "type": "keyof T",
            "optional": true,
            "default": "'id'",
            "description": "The key to use for comparison (defaults to 'id')"
          }
        ]
      },
      {
        "name": "update",
        "type": "(index: number, item: T) => void",
        "description": "Update an item at a specific index",
        "category": "mutation",
        "parameters": [
          {
            "name": "index",
            "type": "number",
            "description": "The index of the item to update"
          },
          {
            "name": "item",
            "type": "T",
            "description": "The new item to replace the existing one"
          }
        ]
      },
      {
        "name": "updateById",
        "type": "(id: any, updates: Partial<T>, key?: keyof T) => void",
        "description": "Update an item by its ID or specified key with partial updates",
        "category": "mutation",
        "parameters": [
          {
            "name": "id",
            "type": "any",
            "description": "The ID value to match"
          },
          {
            "name": "updates",
            "type": "Partial<T>",
            "description": "Partial object with properties to update"
          },
          {
            "name": "key",
            "type": "keyof T",
            "optional": true,
            "default": "'id'",
            "description": "The key to use for comparison (defaults to 'id')"
          }
        ]
      },
      {
        "name": "clear",
        "type": "() => void",
        "description": "Remove all items from the array",
        "category": "mutation"
      },
      {
        "name": "filter",
        "type": "(predicate: (item: T, index: number) => boolean) => void",
        "description": "Filter the array in place using a predicate function",
        "category": "mutation",
        "parameters": [
          {
            "name": "predicate",
            "type": "(item: T, index: number) => boolean",
            "description": "Function that returns true for items to keep"
          }
        ]
      },
      {
        "name": "sort",
        "type": "(compareFn?: (a: T, b: T) => number) => void",
        "description": "Sort the array in place",
        "category": "mutation",
        "parameters": [
          {
            "name": "compareFn",
            "type": "(a: T, b: T) => number",
            "optional": true,
            "description": "Optional comparison function for custom sorting"
          }
        ]
      }
    ]
  },
  "genericTypes": [
    {
      "name": "T",
      "description": "The type of elements in the array"
    }
  ],
  "examples": [
    {
      "title": "Basic Array Operations",
      "description": "Managing a list of items with common operations",
      "code": "const { array, push, pop, remove, clear } = useArray([1, 2, 3]);\n\nreturn (\n  <div>\n    <p>Array: {JSON.stringify(array)}</p>\n    <button onClick={() => push(array.length + 1)}>Add Item</button>\n    <button onClick={pop}>Remove Last</button>\n    <button onClick={() => remove(0)}>Remove First</button>\n    <button onClick={clear}>Clear All</button>\n  </div>\n);"
    }
  ],
  "dependencies": ["react"],
  "imports": [
    "import { useState, useCallback } from 'react';"
  ],
  "notes": [
    "All mutation methods are memoized with useCallback for performance",
    "Supports generic types for type-safe array operations",
    "Provides both index-based and ID-based operations",
    "Maintains referential equality for unchanged arrays"
  ]
}